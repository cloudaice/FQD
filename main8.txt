/*
 读取目录
 *
 * 这取代了旧的GETDIR（）接口。新的应用程序应该使用。
 *
 * 1.文件系统之间可以选择两种操作模式：
 * READDIR实施忽略偏移参数，并且传递给填充函数的零点偏移。
 * 填充函数将不会返回'1'（除非发生错误），
 * 那么整个目录是只读到单一READDIR操作。
 *
 * 2.readdir的实施，使目录项偏移的轨道。它使用offset参数总是通过非零偏移填充函数。
 * 当缓冲区已满（或发生错误）填充函数将返回'1'。
 */
int fqd_readdir(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset,
        struct fuse_file_info *fi) {
    int retstat = 0;
    DIR *dp;
    struct dirent *de;

    log_msg("\nbb_readdir(path=\"%s\", buf=0x%08x, filler=0x%08x, offset=%lld, fi=0x%08x)\n",
	    path, buf, filler, offset, fi);
    //再次重申，没必要fullpath，但是要注意，fi->fh
    dp = (DIR *) (uintptr_t) fi->fh;

    // 每个目录至少包含两个项目：
?  //如果我的第一个READDIR（）系统调用返回NULL我得到一个错误;
    de = readdir(dp);
    if (de == 0) {
	retstat = bb_error("bb_readdir readdir");
	return retstat;
    }

    //这将整个目录复制到缓冲区。
    //READDIR（）系统时返回NULL，或filter（）返回非零的东西，则退出循环。
   //第一种情况下，仅仅意味着我读整个目录;第二意味着缓冲区已满。
    do {
	log_msg("calling filler with name %s\n", de->d_name);
	if (filler(buf, de->d_name, NULL, 0) != 0) {
	    log_msg("    ERROR bb_readdir filler:  buffer full");
	    return -ENOMEM;
	}
    } while ((de = readdir(dp)) != NULL);

    log_fi(fi);

    return retstat;

}
//释放目录
int fqd_releasedir(const char *path, struct fuse_file_info *fi) {
int retstat = 0;

    log_msg("\nbb_releasedir(path=\"%s\", fi=0x%08x)\n",
	    path, fi);
    log_fi(fi);

    closedir((DIR *) (uintptr_t) fi->fh);

    return retstat;
}

/** 同步目录的内容
 *
 *如果数据同步参数不为零，那么唯一的用户数据应被刷新，而不是元数据
 *
 */

//什么时候被调用？当一个用户要同步，而其恰恰是个目录。

int fqd_fsyncdir(const char *path, int datasync, struct fuse_file_info *fi) {
 int retstat = 0;

    log_msg("\nbb_fsyncdir(path=\"%s\", datasync=%d, fi=0x%08x)\n",
	    path, datasync, fi);
    log_fi(fi);

    return retstat;
}
/*
 *初始化文件系统
 *

 *返回值将作为私有数据从fuse_context传递到所有文件操作符，
 * 并且作为destory（）方法的一个参数
 *

 */
void *fqd_init(struct fuse_conn_info *conn) {
 log_msg("\nbb_init()\n");

    return BB_DATA;

}